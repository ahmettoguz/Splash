/*********
   CTIS164 - Template Source Program
----------
STUDENT :
SECTION :
HOMEWORK:
----------
PROBLEMS:
----------
ADDITIONAL FEATURES:
*********/
/*
(Dörtgen çizimi) gl rect2f(x, y, x, y);
*/
/*
(noktali çizgi)
//  glEnable(GL_LINE_STIPPLE);
//  glLineStipple(1, 0x00F0);
//  glDisable(GL_LINE_STIPPLE);
*/
/*
(translate trigo)
void vertex(point_t P, point_t position, double angle) {
	double xp = (P.x * cos(angle) - P.y * sin(angle)) + position.x;
	double yp = (P.x * sin(angle) + P.y * cos(angle)) + position.y;
	vertex({ 8, 25 }, p.pos, angle);
*/
/*
vektör hizi= mulV(ENEMY_SPEED, unitV(subV(P.pos, E.pos)));
vektör yeri belirlerken= addV(p.pos, pol2rec({ 30, p.angle }));
vektör ilerleme = subV(E.pos, E.vel);
*/
/*
 (API command to midfy ModelView(MV) matrix)

	glLoadIdentity(); mv = identity        main i 1 diğerleri 0
	glTranslatef(tx, ty, 0);  mv = mv. (main yine 1   son column = tx, ty, 1) son argüman0: 2 dim olduğu için
	glScalef(sx, sy, 1); mv = mv.(maini sx, sy, 1) diğerleri 0
	glRotatef(Q, 0, 0, 1); mv = mv.([cosq, -sinQ, 0], [sinQ  cosQ 0], [0, 0, 1])
bunları yapınca glvertex2f değişiyo tekrar initialize etmek istiyorsan glLoadIdentity(); yi çağır.

Ardı ardına rotate ve translate koydun mesela sondakini, ilk önce yapar yani mesela önce translate sonra rotati yapar çünkü en son oluşan matrixte önce rotate yapılır ama translate yapılırken sonra uygulanır.

*/
/*
Stringi değiştirmemek için fonksiyona giderken
(const char name[])
*/
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <stdarg.h>
#include <windows.h>

#define WINDOW_WIDTH  1500
#define WINDOW_HEIGHT 750
#define TIMER_PERIOD  16 // Period for the timer.
#define TIMER_ON         1 // 0:disable timer, 1:enable timer
#define D2R 0.0174532

#define MAXBALL 100

#define SMALL 0
#define MID 1
#define BIG 2
#define HUGE 3

#define SMALLRAD 7
#define MIDRAD 30
#define BIGRAD 50
#define HUGERAD 70


/* Global Variables for Template File */
bool up = false, down = false, right = false, left = false;
bool right1 = false, left1 = false;
int winWidth, winHeight, timems, times, timeremain, ballindex, lvl; // current Window width and height
float barincrease, dist;

typedef struct {
	int r, g, b;
}color_t;
typedef struct {
	float x, y;
}point_t;
typedef struct {
	point_t p;
	double angle;
	double speed;
	color_t c1;
	color_t c2;
}player_t;
typedef struct {
	color_t c;
	point_t p;
	bool active;
	float speed;
}arrow_t;
typedef struct {
	point_t p, velvector;
	float velvectorspeed;
	char type;
	bool active;
	color_t c;
}ball_t;

point_t velV_small = { 2,-5.5 };
point_t velV_mid = { 2,-6.5 };
point_t velV_big = { 2,-7.5 };
point_t velV_huge = { 2,-9.5 };

arrow_t a1, a2;
player_t p1, p2;
point_t lastpoint1, lastpoint2;
ball_t ball[MAXBALL];

//
// to draw circle, center at (x,y)
// radius r
//
void circle(int x, int y, int r)
{
#define PI 3.1415
	float angle;
	glBegin(GL_POLYGON);
	for (int i = 0; i < 100; i++)
	{
		angle = 2 * PI * i / 100;
		glVertex2f(x + r * cos(angle), y + r * sin(angle));
	}
	glEnd();
}

void circle_wire(int x, int y, int r)
{
#define PI 3.1415
	float angle;

	glBegin(GL_LINE_LOOP);
	for (int i = 0; i < 100; i++)
	{
		angle = 2 * PI * i / 100;
		glVertex2f(x + r * cos(angle), y + r * sin(angle));
	}
	glEnd();
}

void print(int x, int y, const char* string, void* font)
{
	int len, i;

	glRasterPos2f(x, y);
	len = (int)strlen(string);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(font, string[i]);
	}
}

// display text with variables.
// vprint(-winWidth / 2 + 10, winHeight / 2 - 20, GLUT_BITMAP_8_BY_13, "ERROR: %d", numClicks);
void vprint(int x, int y, void* font, const char* string, ...)
{
	va_list ap;
	va_start(ap, string);
	char str[1024];
	vsprintf_s(str, string, ap);
	va_end(ap);

	int len, i;
	glRasterPos2f(x, y);
	len = (int)strlen(str);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(font, str[i]);
	}
}

// vprint2(-50, 0, 0.35, "00:%02d", timeCounter);
void vprint2(int x, int y, float size, const char* string, ...) {
	va_list ap;
	va_start(ap, string);
	char str[1024];
	vsprintf_s(str, string, ap);
	va_end(ap);
	glPushMatrix();
	glTranslatef(x, y, 0);
	glScalef(size, size, 1);

	int len, i;
	len = (int)strlen(str);
	for (i = 0; i < len; i++)
	{
		glutStrokeCharacter(GLUT_STROKE_ROMAN, str[i]);
	}
	glPopMatrix();
}

void vertex(point_t P, point_t position, double angle) {
	double xp = (P.x * cos(angle * D2R) - P.y * sin(angle * D2R)) + position.x;
	double yp = (P.x * sin(angle * D2R) + P.y * cos(angle * D2R)) + position.y;

	glVertex2f(xp, yp);
}

//add_Ball(HUGE,{0,0}, dx(2), {255,0,0}, &ballindex );
void add_Ball(int tp, point_t p, float dx, bool updown, color_t c, int* i)
{

	//necessary position information
	{
		ball[*i].active = true;
		ball[*i].p = { p.x, p.y };
		ball[*i].c = { c.r,c.g,c.b };
		ball[*i].type = tp;
	}

	//velocity vector
	{
		if (ball[*i].type == SMALL)
		{
			if (updown == true)
				ball[*i].velvector.y = -velV_small.y;
			else
				ball[*i].velvector.y = velV_small.y;

			ball[*i].velvector.x = dx;
			ball[*i].velvectorspeed = ball[*i].velvector.y;
		}
		else if (ball[*i].type == MID)
		{
			if (updown == true)
				ball[*i].velvector.y = -velV_mid.y;
			else
				ball[*i].velvector.y = velV_mid.y;

			ball[*i].velvector.x = dx;

			ball[*i].velvectorspeed = ball[*i].velvector.y;
		}
		else if (ball[*i].type == BIG)
		{
			if (updown == true)
				ball[*i].velvector.y = -velV_big.y;
			else
				ball[*i].velvector.y = velV_big.y;

			ball[*i].velvector.x = dx;

			ball[*i].velvectorspeed = ball[*i].velvector.y;
		}
		else if (ball[*i].type == HUGE)
		{
			if (updown == true)
				ball[*i].velvector.y = -velV_huge.y;
			else
				ball[*i].velvector.y = velV_huge.y;

			ball[*i].velvector.x = dx;

			ball[*i].velvectorspeed = ball[*i].velvector.y;
		}
	}

	//increase ball index
	(*i)++;
}

void hit_split_balls(ball_t* b, int* bind, arrow_t* a)
{
	//remove arrow
	a->active = false;

	//remove ball
	b->active = false;

	//add 2 new ball if it is not small one
	if (b->type == MID)
	{
		add_Ball(SMALL, b->p, 2, true, { 0,0,255 }, bind);
		add_Ball(SMALL, b->p, -2, true, { 0,0,255 }, bind);
	}
	else if (b->type == BIG)
	{
		add_Ball(MID, b->p, 2, true, { 0,0,255 }, bind);
		add_Ball(MID, b->p, -2, true, { 0,0,255 }, bind);
	}
	else if (b->type == HUGE)
	{
		add_Ball(BIG, b->p, 2, true, { 0,0,255 }, bind);
		add_Ball(BIG, b->p, -2, true, { 0,0,255 }, bind);
	}
}

void arrow_Hit(arrow_t* a1, arrow_t* a2, ball_t b[], int* bind)
{
	if (a1->active == true)
	{
		for (int i = 0; i < *bind && a1->active == true; i++)
			if (b[i].active == true)
			{
				for (int j = -320; j <= a1->p.y && b[i].active == true && a1->active == true; j++)
				{
					//calculate distance
					{
						if (b[i].type == SMALL)
						{
							dist = sqrt((b[i].p.x - a1->p.x) * (b[i].p.x - a1->p.x) + (b[i].p.y - j) * (b[i].p.y - j)) - SMALLRAD;
						}
						else if (b[i].type == MID)
						{
							dist = sqrt((b[i].p.x - a1->p.x) * (b[i].p.x - a1->p.x) + (b[i].p.y - j) * (b[i].p.y - j)) - MIDRAD;
						}
						else if (b[i].type == BIG)
						{
							dist = sqrt((b[i].p.x - a1->p.x) * (b[i].p.x - a1->p.x) + (b[i].p.y - j) * (b[i].p.y - j)) - BIGRAD;
						}
						else if (b[i].type == HUGE)
						{
							dist = sqrt((b[i].p.x - a1->p.x) * (b[i].p.x - a1->p.x) + (b[i].p.y - j) * (b[i].p.y - j)) - HUGERAD;
						}
					}

					//hit
					if (dist <= 0)
					{
						hit_split_balls(&b[i], bind, a1);
					}
				}
			}
	}
}

void reflect_ball(ball_t* b)
{
	//left reflection
	{
		if (b->type == SMALL && b->p.x - SMALLRAD <= -734)
		{
			//prevent to go below the ground
			{
				if (b->type == SMALL && b->p.x - SMALLRAD <= -734)
					b->p.x = -734 + SMALLRAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
		else if (b->type == MID && b->p.x - MIDRAD <= -734)
		{
			//prevent to go below the ground
			{
				if (b->type == MID && b->p.x - MIDRAD <= -734)
					b->p.x = -734 + MIDRAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
		else if (b->type == BIG && b->p.x - BIGRAD <= -734)
		{
			//prevent to go below the ground
			{
				if (b->type == BIG && b->p.x - BIGRAD <= -734)
					b->p.x = -734 + BIGRAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
		else if (b->type == HUGE && b->p.x - HUGERAD <= -734)
		{
			//prevent to go below the ground
			{
				if (b->type == HUGE && b->p.x - HUGERAD <= -734)
					b->p.x = -734 + HUGERAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
	}

	//right reflection
	{
		if (b->type == SMALL && b->p.x + SMALLRAD >= 734)
		{
			//prevent to go below the ground
			{
				if (b->type == SMALL && b->p.x + SMALLRAD >= 734)
					b->p.x = 734 - SMALLRAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
		else if (b->type == MID && b->p.x + MIDRAD >= 734)
		{
			//prevent to go below the ground
			{
				if (b->type == MID && b->p.x + MIDRAD >= 734)
					b->p.x = 734 - MIDRAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
		else if (b->type == BIG && b->p.x + BIGRAD >= 734)
		{
			//prevent to go below the ground
			{
				if (b->type == BIG && b->p.x + BIGRAD >= 734)
					b->p.x = 734 - BIGRAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
		else if (b->type == HUGE && b->p.x + HUGERAD >= 734)
		{
			//prevent to go below the ground
			{
				if (b->type == BIG && b->p.x + HUGERAD >= 734)
					b->p.x = 734 - HUGERAD;
			}

			//velocity vektörünü ayarla
			b->velvector.x = -b->velvector.x;
		}
	}

	//Bottom reflect with velocity vector
	{
		if (b->type == SMALL && b->p.y - SMALLRAD <= -316)
		{
			//prevent to go below the ground
			{
				if (b->type == SMALL && b->p.y - SMALLRAD <= -316)
					b->p.y = -316 + SMALLRAD;
			}

			//velocity vektörünü ayarla
			if (b->velvectorspeed > 0)
				b->velvector.y = b->velvectorspeed;
			else
				b->velvector.y = -b->velvectorspeed;
		}
		else if (b->type == MID && b->p.y - MIDRAD <= -316)
		{
			//prevent to go below the ground
			{
				if (b->type == MID && b->p.y - MIDRAD <= -316)
					b->p.y = -316 + MIDRAD;
			}

			//velocity vektörünü ayarla
			if (b->velvectorspeed > 0)
				b->velvector.y = b->velvectorspeed;
			else
				b->velvector.y = -b->velvectorspeed;
		}
		else if (b->type == BIG && b->p.y - BIGRAD <= -316)
		{
			//prevent to go below the ground
			{
				if (b->type == BIG && b->p.y - BIGRAD <= -316)
					b->p.y = -316 + BIGRAD;
			}

			//velocity vektörünü ayarla
			if (b->velvectorspeed > 0)
				b->velvector.y = b->velvectorspeed;
			else
				b->velvector.y = -b->velvectorspeed;
		}
		else if (b->type == HUGE && b->p.y - HUGERAD <= -316)
		{
			//prevent to go below the ground
			{
				if (b->type == HUGE && b->p.y - HUGERAD <= -316)
					b->p.y = -316 + HUGERAD;
			}

			//velocity vektörünü ayarla
			if (b->velvectorspeed > 0)
				b->velvector.y = b->velvectorspeed;
			else
				b->velvector.y = -b->velvectorspeed;
		}
	}
}

void move_ball(ball_t b[])
{
	for (int i = 0; i < MAXBALL; i++)
	{
		if (b[i].active == true)
		{
			b[i].p.x += b[i].velvector.x;
			b[i].p.y += b[i].velvector.y;

			b[i].velvector.y -= 0.1;

			//check the reflection of the ball
			reflect_ball(&b[i]);
		}
	}
}

void move_player(player_t* p1, player_t* p2)
{
	//player 1
	{
		if (p1->p.x >= -700 && left == true)
		{
			p1->p.x -= p1->speed;
			p1->angle += 10;
		}

		if (p1->p.x <= +700 && right == true)
		{
			p1->p.x += p1->speed;
			p1->angle -= 10;
		}
	}

	//player 2
	{
		if (p2->p.x >= -700 && left1 == true)
		{
			p2->p.x -= p2->speed;
			p2->angle += 10;
		}

		if (p2->p.x <= +700 && right1 == true)
		{
			p2->p.x += p2->speed;
			p2->angle -= 10;
		}
	}
}

void move_arrow(arrow_t* a)
{
	if (a->active == true)
	{
		//check hitpoint
		if (a->p.y >= 352)
			a->active = false;

		a->p.y += a->speed;
	}
}

void dispbackrec()
{
	glBegin(GL_QUADS);
	glColor3ub(213, 213, 250);
	glVertex2f(-750, -375);
	glVertex2f(750, -375);

	glColor3ub(130, 130, 230);
	glVertex2f(750, 375);
	glVertex2f(-750, 375);

	glEnd();
}

void disp_frames()
{
	glColor3f(0.3, 0.2, 0.7);

	//boxes of frames
	{
		//top
		glRectf(-800, 500, 800, 360);

		//left
		glRectf(-800, -375, -735, 360);

		//right
		glRectf(800, -375, 735, 500);

		//bottom
		glRectf(-800, -500, 800, -320);
	}

	glLineWidth(6);
	glColor3f(0, 0, 0);

	//frames
	{

		glBegin(GL_LINES);

		//left					//6 3  //çizginin sınırı -735 de
		glVertex2f(-738, 360);
		glVertex2f(-738, -320);

		//right					//6 3  //çizginin sınırı -735 de
		glVertex2f(738, 360);
		glVertex2f(738, -320);

		//top
		glVertex2f(-741, 360);
		glVertex2f(741, 360);

		//bottom
		glVertex2f(-741, -320);
		glVertex2f(741, -320);

		glEnd();
	}
}

void disp_info()
{
	glColor3f(1, 0, 1);
	glLineWidth(2);

	//time bar
	{
		glBegin(GL_LINE_LOOP);

		glVertex2f(-500, -330);
		glVertex2f(500, -330);
		glVertex2f(500, -336);
		glVertex2f(-500, -336);

		glEnd();
	}

	//time line
	{
		if (double(times) * barincrease + double(timems) / 1000 * barincrease - 500 <= 500)
		{

			glColor3f(0, 1, 0);
			glLineWidth(9);
			glBegin(GL_POLYGON);

			glVertex2f(times * barincrease - 500 + double(timems) / 1000 * barincrease, -336);
			glVertex2f(times * barincrease - 500 + double(timems) / 1000 * barincrease, -330);
			glVertex2f(500, -330);
			glVertex2f(500, -336);

			glEnd();
		}
	}

	//time information
	{
		glLineWidth(1.5);
		if (double(times) * barincrease + double(timems) / 1000 * barincrease - 500 <= 500)
		{
			if ((1000 - timems) / 100 != 10)
				vprint2(515, -338, 0.13, "%02d:%.01d", timeremain - times, (1000 - timems) / 100);
			else
				vprint2(515, -338, 0.13, "%02d:9", timeremain - times);
		}
		else
			vprint2(515, -338, 0.13, "00:0");
	}
}

void disp_player(player_t p)
{
	//pipe
	{
		glColor3ub(p.c2.r, p.c2.g, p.c2.b);


		glRectf(p.p.x - 7, p.p.y + 35, p.p.x + 7, p.p.y + 15);

		//frame
		{
			glLineWidth(2);
			glColor3f(0, 0, 0);
			glBegin(GL_LINE_STRIP);
			glVertex2f(p.p.x - 7, p.p.y + 15);
			glVertex2f(p.p.x - 7, p.p.y + 35);
			glVertex2f(p.p.x + 7, p.p.y + 35);
			glVertex2f(p.p.x + 7, p.p.y + 15);
			glEnd();
		}
	}

	//rectangle
	{
		//recltange
		{
			glColor3ub(p.c1.r, p.c1.g, p.c1.b);
			glRectf(p.p.x - 30, p.p.y + 15, p.p.x + 30, p.p.y - 20);
		}

		//frame
		{
			glColor3f(0, 0, 0);
			glBegin(GL_LINE_STRIP);

			glVertex2f(p.p.x + 7, p.p.y + 15);
			glVertex2f(p.p.x - 7, p.p.y + 15);
			glVertex2f(p.p.x - 30, p.p.y + 15);
			glVertex2f(p.p.x - 30, p.p.y - 20);
			glVertex2f(p.p.x + 30, p.p.y - 20);
			glVertex2f(p.p.x + 30, p.p.y + 15);
			glVertex2f(p.p.x + 7, p.p.y + 15);

			glEnd();
		}

		//ornament
		{
			glBegin(GL_POLYGON);


			glColor3ub(168, 168, 255);
			glVertex2f(p.p.x + 30, p.p.y - 2.5);

			glColor3ub(p.c2.r, p.c2.g, p.c2.b);
			glVertex2f(p.p.x + 7, p.p.y + 14);
			glVertex2f(p.p.x - 7, p.p.y + 14);

			glColor3ub(168, 168, 255);
			glVertex2f(p.p.x - 30, p.p.y - 2.5);

			glColor3ub(128, 128, 255);
			glVertex2f(p.p.x, p.p.y - 20);
			glEnd();

			//frames
			glBegin(GL_LINE_LOOP);
			glColor3f(0, 0, 0);

			glVertex2f(p.p.x + 30, p.p.y - 2.5);
			glVertex2f(p.p.x + 7, p.p.y + 15);
			glVertex2f(p.p.x - 7, p.p.y + 15);
			glVertex2f(p.p.x - 30, p.p.y - 2.5);
			glVertex2f(p.p.x, p.p.y - 20);

			glEnd();
		}
	}

	//circles
	{
		//cicrles
		{
			glColor3ub(128, 128, 255);

			//left 
			circle(p.p.x - 20, p.p.y - 30, 10);

			//mid
			circle(p.p.x, p.p.y - 30, 10);

			//right 
			circle(p.p.x + 20, p.p.y - 30, 10);
		}

		//frames
		{
			glLineWidth(2);
			glColor3f(0, 0, 0);

			//left 
			circle_wire(p.p.x - 20, p.p.y - 30, 10);

			//mid
			circle_wire(p.p.x, p.p.y - 30, 10);

			//right 
			circle_wire(p.p.x + 20, p.p.y - 30, 10);
		}

		//ornaments
		{
			glColor3f(0, 0, 0);

			glBegin(GL_LINES);

			//left
			{
				vertex({ 0, 10 }, { p.p.x - 20,p.p.y - 30 }, p.angle);
				vertex({ 0, -10 }, { p.p.x - 20,p.p.y - 30 }, p.angle);
				vertex({ 10, 0 }, { p.p.x - 20,p.p.y - 30 }, p.angle);
				vertex({ -10, 0 }, { p.p.x - 20,p.p.y - 30 }, p.angle);
			}

			//mid
			{
				vertex({ 0, 10 }, { p.p.x  ,p.p.y - 30 }, p.angle);
				vertex({ 0, -10 }, { p.p.x ,p.p.y - 30 }, p.angle);
				vertex({ 10, 0 }, { p.p.x ,p.p.y - 30 }, p.angle);
				vertex({ -10, 0 }, { p.p.x ,p.p.y - 30 }, p.angle);
			}

			//right
			{
				vertex({ 0, 10 }, { p.p.x + 20,p.p.y - 30 }, p.angle);
				vertex({ 0, -10 }, { p.p.x + 20,p.p.y - 30 }, p.angle);
				vertex({ 10, 0 }, { p.p.x + 20,p.p.y - 30 }, p.angle);
				vertex({ -10, 0 }, { p.p.x + 20,p.p.y - 30 }, p.angle);
			}

			glEnd();
		}
	}
}

void disp_arrow(arrow_t a, player_t p, point_t lp)
{
	if (a.active == true)
	{
		glLineWidth(3);

		//straight line
		{
			glBegin(GL_LINES);

			glColor3ub(a.c.r, a.c.g, a.c.b);
			glVertex2f(a.p.x, a.p.y);

			glColor3f(0, 0, 0);
			glVertex2f(lp.x, lp.y - 40);

			glEnd();
		}

		//left arrow
		{
			glBegin(GL_LINES);

			glColor3ub(a.c.r, a.c.g, a.c.b);
			glVertex2f(a.p.x, a.p.y);
			glVertex2f(a.p.x - 7, a.p.y - 10);

			glEnd();
		}

		//right arrow
		{
			glBegin(GL_LINES);

			glVertex2f(a.p.x, a.p.y);
			glVertex2f(a.p.x + 7, a.p.y - 10);

			glEnd();
		}
	}
}

void disp_balls(ball_t b[])
{
	glLineWidth(2);

	for (int i = 0; i < MAXBALL; i++)
	{
		if (b[i].active == true)
		{
			glColor3ub(b[i].c.r, b[i].c.g, b[i].c.b);

			//Display circle
			{
				if (b[i].type == SMALL)
					circle(b[i].p.x, b[i].p.y, SMALLRAD);
				else if (b[i].type == MID)
					circle(b[i].p.x, b[i].p.y, MIDRAD);
				else if (b[i].type == BIG)
					circle(b[i].p.x, b[i].p.y, BIGRAD);
				else if (b[i].type == HUGE)
					circle(b[i].p.x, b[i].p.y, HUGERAD);

				//display wire 
				{
					glColor3f(0, 0, 0);
					if (b[i].type == SMALL)
						circle_wire(b[i].p.x, b[i].p.y, SMALLRAD);
					else if (b[i].type == MID)
						circle_wire(b[i].p.x, b[i].p.y, MIDRAD);
					else if (b[i].type == BIG)
						circle_wire(b[i].p.x, b[i].p.y, BIGRAD);
					else if (b[i].type == HUGE)
						circle_wire(b[i].p.x, b[i].p.y, HUGERAD);
				}
			}
		}
	}
}

void display() {
	//
	// clear window to black
	//
	glClearColor(0, 0, 0, 0);
	glClear(GL_COLOR_BUFFER_BIT);

	//display background big rectangle
	dispbackrec();

	//display frames
	disp_frames();

	//display informations
	disp_info();

	//display arrow
	disp_arrow(a1, p1, lastpoint1);
	//disp_arrow(a2, p2, lastpoint2);

	//display player
	disp_player(p1);
	//disp_player(p2);

	//display balls
	disp_balls(ball);


	glutSwapBuffers();
}

//
// key function for ASCII charachters like ESC, a,b,c..,A,B,..Z
//
void onKeyDown(unsigned char key, int x, int y)
{
	switch (key) {
	case 'A':
	case 'a': left1 = true; break;

	case'D':
	case 'd': right1 = true; break;
	}

	// exit when ESC is pressed.
	if (key == 27)
		exit(0);

	if (key == 32)
	{
		if (a1.active == false)
		{
			a1.active = true;

			a1.p.x = p1.p.x;
			a1.p.y = -242;
			lastpoint1.x = p1.p.x;
			lastpoint1.y = p1.p.y;
		}
	}

	if (key == 'v' || key == 'V' || key == 'w' || key == 'W')
	{
		if (a2.active == false)
		{
			a2.active = true;

			a2.p.x = p2.p.x;
			a2.p.y = -242;
			lastpoint2.x = p2.p.x;
			lastpoint2.y = p2.p.y;
		}
	}


	// to refresh the window it calls display() function
	glutPostRedisplay();
}

void onKeyUp(unsigned char key, int x, int y)
{
	switch (key) {
	case 'A':
	case 'a': left1 = false; break;

	case'D':
	case 'd': right1 = false; break;
	}

	// exit when ESC is pressed.
	if (key == 27)
		exit(0);

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
void onSpecialKeyDown(int key, int x, int y)
{
	// Write your codes here.
	switch (key) {
	case GLUT_KEY_UP: up = true; break;
	case GLUT_KEY_DOWN: down = true; break;
	case GLUT_KEY_LEFT: left = true; break;
	case GLUT_KEY_RIGHT: right = true; break;
	}

	if (up == true)
	{
		if (a1.active == false)
		{
			a1.active = true;

			a1.p.x = p1.p.x;
			a1.p.y = -242;
			lastpoint1.x = p1.p.x;
			lastpoint1.y = p1.p.y;
		}
	}

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
void onSpecialKeyUp(int key, int x, int y)
{
	// Write your codes here.
	switch (key) {
	case GLUT_KEY_UP: up = false; break;
	case GLUT_KEY_DOWN: down = false; break;
	case GLUT_KEY_LEFT: left = false; break;
	case GLUT_KEY_RIGHT: right = false; break;
	}

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// When a click occurs in the window,
// It provides which button
// buttons : GLUT_LEFT_BUTTON , GLUT_RIGHT_BUTTON
// states  : GLUT_UP , GLUT_DOWN
// x, y is the coordinate of the point that mouse clicked.
//
void onClick(int button, int stat, int x, int y)
{
	// GLUT to OpenGL coordinate conversion:
	x = x - winWidth / 2;
	y = winHeight / 2 - y;

	if (stat == GLUT_DOWN && button == GLUT_LEFT_BUTTON)
		printf("%d , %d\n", x, y);

	if (stat == GLUT_DOWN && button == GLUT_RIGHT_BUTTON)
		printf("glVertex2f(%d , %d);\n", x, y);

	// to refresh the window it calls display() function
	glutPostRedisplay();
}

//
// This function is called when the window size changes.
// w : is the new width of the window in pixels.
// h : is the new height of the window in pixels.
//
void onResize(int w, int h)
{
	winWidth = w;
	winHeight = h;
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-w / 2, w / 2, -h / 2, h / 2, -1, 1);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	display(); // refresh window.
}

void onMoveDown(int x, int y) {
	// Write your codes here.



	// to refresh the window it calls display() function   
	glutPostRedisplay();
}

// GLUT to OpenGL coordinate conversion:
//   x2 = x1 - winWidth / 2
//   y2 = winHeight / 2 - y1
void onMove(int x, int y) {
	// Write your codes here.



	// to refresh the window it calls display() function
	glutPostRedisplay();
}

#if TIMER_ON == 1
void onTimer(int v) {

	glutTimerFunc(TIMER_PERIOD, onTimer, 0);
	// Write your codes here.

	//move player
	move_player(&p1, &p2);

	//move arrow
	move_arrow(&a1);
	move_arrow(&a2);

	//move ball
	move_ball(ball);

	//check arrow hits
	arrow_Hit(&a1, &a2, ball, &ballindex);

	//time related
	{
		//increase time
		timems += 16;
		if (timems >= 1000)
		{
			times++;
			timems -= 1000;
		}
	}

	// to refresh the window it calls display() function
	glutPostRedisplay(); // display()

}
#endif

void Init() {
	//initialize ball, ballindex
	{
		ballindex = 0;

		for (ballindex = 0; ballindex < MAXBALL; ballindex++)
			ball[ballindex].active = false;

		ballindex = 0;
	}

	//initialize lvl
	{
		{
			lvl = 0;


			add_Ball(HUGE, { 0,0 }, 2, false, { 0,255,0 }, &ballindex);
			add_Ball(HUGE, { 0,0 }, -2, false, { 0,255,0 }, &ballindex);
			add_Ball(HUGE, { 0,0 }, -1, false, { 0,255,0 }, &ballindex);
			//add_Ball(BIG, { -100,0 }, -2, false, { 255,0,0 }, &ballindex);


		}


	}

	//initialize time
	{
		timems = 0;
		times = 0;
		timeremain = 30;
		barincrease = 1000. / timeremain;
	}

	//initialize arrow
	{
		a1.c.r = 255;
		a1.c.g = 0;
		a1.c.b = 0;
		a1.speed = 10;

		a2.c.r = 255;
		a2.c.g = 0;
		a2.c.b = 0;
		a2.speed = 10;
	}

	//initialize player
	{
		p1.c1 = { 40, 100, 10 };
		//p1.c2 = { 128, 0, 255 };
		p1.c2 = { 64,255,128 };
		p1.p.x = 0;
		p1.p.y = -277;//-277
		p1.speed = 5;

		p2.c1 = { 40, 100, 100 };
		p2.c2 = { 255, 128, 64 };
		p2.p.x = 0;
		p2.p.y = -277;//-277
		p2.speed = 5;
	}


	// Smoothing shapes
	{
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	}
}

void main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
	glutInitWindowPosition(20, 50);
	glutCreateWindow("Bubble Splash");

	glutDisplayFunc(display);
	glutReshapeFunc(onResize);

	//
	// keyboard registration
	//
	glutKeyboardFunc(onKeyDown);
	glutSpecialFunc(onSpecialKeyDown);

	glutKeyboardUpFunc(onKeyUp);
	glutSpecialUpFunc(onSpecialKeyUp);

	//
	// mouse registration
	//
	glutMouseFunc(onClick);
	glutMotionFunc(onMoveDown);
	glutPassiveMotionFunc(onMove);

#if  TIMER_ON == 1
	// timer event
	glutTimerFunc(TIMER_PERIOD, onTimer, 0);
#endif

	Init();

	glutMainLoop();
}
